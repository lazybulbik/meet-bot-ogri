from aiogram import types

import utils
from questions import *
from loader import db

back = types.InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back:no')
back_with_del = types.InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back:del')
back_with_del_menu = types.InlineKeyboardMarkup().add(back_with_del)

back_in_register = types.InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='reg_back')
reg_back_menu = types.InlineKeyboardMarkup().add(back_in_register)


class Register:
    def get_gender_menu(self):
        male = types.InlineKeyboardButton('–ú—É–∂c–∫–æ–π', callback_data='–ú—É–∂—Å–∫–æ–π')
        female = types.InlineKeyboardButton('–ñ–µ–Ω—Å–∫–∏–π', callback_data='–ñ–µ–Ω—Å–∫–∏–π')

        return types.InlineKeyboardMarkup().row(male, female)

    def get_alcohol_menu(self):
        return types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton('–ù–µ –ø—å—é', callback_data='–ù–µ –ø—å—é'),
            types.InlineKeyboardButton('–ü–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º', callback_data='–ü–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º'),
        ).row(
            types.InlineKeyboardButton('–ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º', callback_data='–ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º'),
            types.InlineKeyboardButton('–ü–æ –≤–µ—á–µ—Ä–∞–º', callback_data='–ü–æ –≤–µ—á–µ—Ä–∞–º'),
        ).row(
            back_in_register
        )

    def get_smoking_menu(self):
        return types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton('–ö—É—Ä—é', callback_data='–ö—É—Ä—é'),
            types.InlineKeyboardButton('–ù–µ –∫—É—Ä—é', callback_data='–ù–µ –∫—É—Ä—é'),
        ).row(
            types.InlineKeyboardButton('–†–µ–¥–∫–æ', callback_data='–†–µ–¥–∫–æ'),
        ).row(
            back_in_register
        )

    def get_body_menu(self):
        return types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton('–•—É–¥–æ—â–∞–≤–æ–µ', callback_data='–•—É–¥–æ—â–∞–≤–æ–µ'),
            types.InlineKeyboardButton('–û–±—ã—á–Ω–æ–µ', callback_data='–û–±—ã—á–Ω–æ–µ'),
            types.InlineKeyboardButton('–ü–ª–æ—Ç–Ω–æ–µ', callback_data='–ü–ª–æ—Ç–Ω–æ–µ'),
        ).row(
            types.InlineKeyboardButton('–ü–æ–ª–Ω–æ–µ', callback_data='–ü–æ–ª–Ω–æ–µ'),
            types.InlineKeyboardButton('–°—Ç—Ä–æ–π–Ω–æ–µ', callback_data='–°—Ç—Ä–æ–π–Ω–æ–µ'),
            types.InlineKeyboardButton('–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ', callback_data='–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ'),
        ).row(
            types.InlineKeyboardButton('–ê—Ç–ª–µ—Ç–∏—á–µ—Å–∫–æ–µ', callback_data='–ê—Ç–ª–µ—Ç–∏—á–µ—Å–∫–æ–µ'),
        ).row(
            back_in_register
        )

    def get_childrens_menu(self):
        return types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton('–ù–µ—Ç', callback_data='–ù–µ—Ç'),
            types.InlineKeyboardButton('–ï—Å—Ç—å', callback_data='–ï—Å—Ç—å'),
        ).row(
            back_in_register
        )

    def get_partner_childrens_menu(self):
        return types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton('–ë–µ–∑ –¥–µ—Ç–µ–π', callback_data='–ë–µ–∑ –¥–µ—Ç–µ–π'),
            types.InlineKeyboardButton('–° –¥–µ—Ç—å–º–∏', callback_data='–° –¥–µ—Ç—å–º–∏'),
        ).row(
            types.InlineKeyboardButton('–ù–µ –≤–∞–∂–Ω–æ', callback_data='–ù–µ –≤–∞–∂–Ω–æ'),
        ).row(
            back_in_register
        )

    def test_1_menu(self, gender, quest):
        quest_data = test_1[gender][quest]
        text = quest_data['text']
        kb = types.InlineKeyboardMarkup()

        for btn in quest_data['btns']:
            if int(quest) == len(test_1[gender]) - 1:
                kb.add(types.InlineKeyboardButton(btn['text'], callback_data=f'test_1:finish:{btn["value"]}'))
            else:
                kb.add(types.InlineKeyboardButton(btn['text'], callback_data=f'test_1:{quest}:{btn["value"]}'))

        if quest == 0:
            kb.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'test_1:reg_back'))
        else:
            kb.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'test_1:{quest - 2}:0'))

        return text, kb

    def test_2_menu(self, gender, quest):
        text = test_2['text']
        kb = types.InlineKeyboardMarkup()

        for btn in test_2[gender][quest]:
            if int(quest) == len(test_2[gender]) - 1:
                kb.add(types.InlineKeyboardButton(btn['text'], callback_data=f'test_2:finish:{btn["value"]}'))
            else:
                kb.add(types.InlineKeyboardButton(btn['text'], callback_data=f'test_2:{quest}:{btn["value"]}'))

        if quest == 0:
            kb.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'test_2:reg_back'))
        else:
            kb.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'test_2:{quest - 2}:0'))                

        return text, kb

    def test_3_menu(self, select_btns):
        print(select_btns)
        text = '*–í—ã–±–µ—Ä–∏ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞—é—â–∏—Ö —Ç–≤–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è*'

        btns = []

        for btn in test_3:
            btn_text = btn['text']
            value = btn['value']

            if btn_text in select_btns:
                btn_text = 'üåü ' + btn_text
                print(btn_text)

            btns.append(types.InlineKeyboardButton(btn_text, callback_data=f'test_3:{btn_text}:{value}'))

        if len(select_btns) == 3:
            done_btn = types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'test_3:done')
        else:
            done_btn = types.InlineKeyboardButton('‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è', callback_data=f'Ignore')

        back_btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'test_3:reg_back')
        kb = types.InlineKeyboardMarkup(row_width=3).add(*btns).row(done_btn).row(back_btn)

        return text, kb

    def test_4_menu(self, select_btns, quest):
        quest_data = test_4[quest]

        text = quest_data['text']

        kb = types.InlineKeyboardMarkup()

        if quest == 2:
            for btn in quest_data['btns']:
                btn_text = btn['text']
                value = btn['value']

                if value in select_btns:
                    index = select_btns.index(value)
                    number = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£'}[index + 1]
                    btn_text = number + ' ' + btn_text

                kb.add(types.InlineKeyboardButton(btn_text, callback_data=f'test_4:{quest}:{value}'))

            return text, kb


        for btn in quest_data['btns']:
            if int(quest) == len(test_4) - 1:
                kb.add(types.InlineKeyboardButton(btn['text'], callback_data=f'test_4:finish:{btn["value"]}'))
            else:
                kb.add(types.InlineKeyboardButton(btn['text'], callback_data=f'test_4:{quest}:{btn["value"]}'))

        if quest == len(test_4) - 1:
            kb.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'test_4:reg_back'))

        return text, kb

    def test_5_menu(self, select_btns, gender):
        text = '–í—ã–±–µ—Ä–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ (–æ—Ç –≤–∞–∂–Ω–æ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ–º—É)'

        btns = []

        for btn in test_5[gender]:
            btn_text = btn

            if btn_text in select_btns:
                index = select_btns.index(btn_text)

                number = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£', 5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£'}[index + 1]

                btn_text = number + ' ' + btn_text

            btns.append(types.InlineKeyboardButton(btn_text, callback_data=f'test_5:{btn}'))

        kb = types.InlineKeyboardMarkup(row_width=3).add(*btns).row(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'test_5:reg_back'))

        return text, kb

    def interests_menu(self, select_btns, page):
        text = '–£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —É–≤–ª–µ—á–µ–Ω–∏—è'
        data = interests[page]

        btns = []

        for btn in data:
            btn_text = btn

            if btn_text in select_btns:
                btn_text = 'üåü ' + btn_text

            btns.append(types.InlineKeyboardButton(btn_text, callback_data=f'interests:select:{btn}:{page}'))

        if page == 0:
            back_btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'None_back')
        else:
            back_btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'interests:move:{page - 1}')

        if page == len(interests) - 1:
            next_btn = types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'None')
        else:
            next_btn = types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data=f'interests:move:{page + 1}')

        counter = types.InlineKeyboardButton(f'{page + 1} / {len(interests)}', callback_data=f'None_next')

        if len(select_btns) > 0:
            done = types.InlineKeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data=f'interests:done')
        else:
            done = types.InlineKeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è', callback_data=f'None_done')

        empty = types.InlineKeyboardButton(' ', callback_data=f'None_empty')

        back = types.InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data=f'interests:reg_back')
        kb = types.InlineKeyboardMarkup(row_width=3).add(*btns).row(empty).row(back_btn, counter, next_btn).row(done).row(back)

        return text, kb


class MainMenu():
    def get_profile(self, user_id):
        user_data = db.get_data(table='users', filters={'id': user_id})[0]

        city = user_data['city']
        height = user_data['height']
        age = user_data['age']
        partner_age = list(map(lambda x: x.strip(), user_data['partner_age'].split('-')))

        text = (f'ü™™ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å* \n'
                f'----------------------------- \n'
                f"–ì–æ—Ä–æ–¥: {city} \n"
                f"–†–æ—Å—Ç: {height} \n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {age} \n\n"
                f"–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_age[0]} - {partner_age[1]} –ª–µ—Ç")

        photo = user_data['photo'].split()[0]

        print(photo)

        edit = types.InlineKeyboardButton('‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', callback_data=f'edit_profile')
        revoke_anket = types.InlineKeyboardButton("üìë –ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='rework')
        photo_menu = types.InlineKeyboardButton('üì∑ –ó–∞–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='photo_menu')

        kb = types.InlineKeyboardMarkup().add(edit).row(revoke_anket).row(photo_menu)

        return photo, text, kb

    def get_edit_menu(self):
        edit_name = types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–º—è', callback_data=f'edit:name')
        edit_height = types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –†–æ—Å—Ç', callback_data=f'edit:height')
        edit_age = types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –í–æ–∑—Ä–∞—Å—Ç', callback_data=f'edit:age')
        edit_partner_age = types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞', callback_data=f'edit:partner_age')
        edit_photo = types.InlineKeyboardButton('üñº –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–æ—Ç–æ', callback_data=f'edit:photo')
        # rework = types.InlineKeyboardButton('üîÑ –ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data=f'rework')

        kb = types.InlineKeyboardMarkup()
        kb.row(edit_name, edit_height)
        kb.row(edit_age, edit_partner_age)
        kb.row(edit_photo)
        # kb.row(rework)
        kb.row(back)

        return kb

    def find_partner(self, user_id, partner_id=None, page=1):
        numbers = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£', 5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£', 8: '8Ô∏è‚É£', 9: '9Ô∏è‚É£', 10: 'üîü'}

        if not partner_id:
            user_data = db.get_data(table='users', filters={'id': user_id})[0]

            pretendients = []


            for partner in db.get_data(table='users'):
                if partner['id'] != user_data['id'] and str(partner['id']) not in user_data['black_list']:
                    precent = utils.Comaparator(partner['id'], user_data['id']).compare()

                    if precent >= 0:
                        pretendients.append(partner['id'])

            if len(pretendients) == 0:
                return None, None, None
        else:
            pretendients = [partner_id]


        partner_data = db.get_data(table='users', filters={'id': pretendients[0]})[0]

        precent = utils.Comaparator(pretendients[0], user_id).compare()

        city = partner_data['city']
        age = partner_data['age']
        height = partner_data['height']
        alcohol = partner_data['alcohol']
        smoking = partner_data['smoking']
        body = partner_data['body']
        childrens = partner_data['childrens']

        priority = []

        for item in partner_data['test_5'].split(';'):
            number = partner_data['test_5'].split(';').index(item) + 1
            number = numbers[number]

            priority.append(f'{number} {item}')

        priority = '\n'.join(priority)

        interests = '\n '.join(partner_data['interests'].split(';'))

        text = (f'*ü´Ç –í–∞—à–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {precent}%* \n'
                f'----------------------------- \n'
                f'–ì–æ—Ä–æ–¥: {city} \n'
                f'–í–æ–∑—Ä–∞—Å—Ç: {age} \n'
                f'–†–æ—Å—Ç: {height} \n'
                f'–î–µ—Ç–∏: {childrens} \n\n'
                f'üç∑–ê–ª–æ–≥–æ–ª—å: {alcohol} \n'
                f'üö¨–ö—É—Ä–µ–Ω–∏–µ: {smoking} \n'
                f'üï¥üèª–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {body} \n')

        prev = types.InlineKeyboardButton('<', callback_data=f'None')
        next = types.InlineKeyboardButton('>', callback_data=f'find:next:{partner_data["id"]}')
        decline = types.InlineKeyboardButton('‚ùå', callback_data=f'find:decline:{partner_data["id"]}')
        ready = types.InlineKeyboardButton('‚ù§Ô∏è', callback_data=f'find:ready:{partner_data["id"]}')
        more_info = types.InlineKeyboardButton('–ú–Ω–µ–Ω–∏–µ –í–∞–∑–æ', callback_data=f'find:more_info:{partner_data["id"]}')

        back = types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä', callback_data=f'back:del')

        kb = types.InlineKeyboardMarkup().row(prev, next).row(decline, ready).row(more_info)

        if len(partner_data['photo'].split()) >= 2:
            photo = partner_data['photo'].split()[page - 1]

        else:
            photo = partner_data['photo'].split()[0]

        if page == 2:
            text = f'–ò–Ω—Ç–µ—Ä–µ—Å—ã: \n\n{interests}'

            prev.callback_data = f'find:prev:{partner_data["id"]}'
            next.callback_data = f'None'            
        
        return photo, text, kb


    def get_presents_menu(self, user_id, partner_id, page=1):
        pretendients = [partner_id]
        numbers = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£', 5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£', 8: '8Ô∏è‚É£', 9: '9Ô∏è‚É£', 10: 'üîü'}

        partner_data = db.get_data(table='users', filters={'id': pretendients[0]})[0]

        precent = utils.Comaparator(pretendients[0], user_id).compare()

        city = partner_data['city']
        age = partner_data['age']
        height = partner_data['height']
        alcohol = partner_data['alcohol']
        smoking = partner_data['smoking']
        body = partner_data['body']
        childrens = partner_data['childrens']

        priority = []

        for item in partner_data['test_5'].split(';'):
            number = partner_data['test_5'].split(';').index(item) + 1
            number = numbers[number]

            priority.append(f'{number} {item}')

        priority = '\n'.join(priority)

        interests = ', '.join(partner_data['interests'].split(';'))

        text = (f'*–ö—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è —Ç–æ–±–æ–πüëÄ* \n'
                f'----------------------------- \n'
                f'*ü´Ç –í–∞—à–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {precent}%* \n'
                f'----------------------------- \n'
                f'–ì–æ—Ä–æ–¥: {city} \n'
                f'–í–æ–∑—Ä–∞—Å—Ç: {age} \n'
                f'–†–æ—Å—Ç: {height} \n'
                f'–î–µ—Ç–∏: {childrens} \n\n'
                f'üç∑–ê–ª–æ–≥–æ–ª—å: {alcohol} \n'
                f'üö¨–ö—É—Ä–µ–Ω–∏–µ: {smoking} \n'
                f'üï¥üèª–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {body} \n')

        prev = types.InlineKeyboardButton('<', callback_data=f'None')
        next = types.InlineKeyboardButton('>', callback_data=f'find:next:{partner_data["id"]}:present')
        decline = types.InlineKeyboardButton('‚ùå', callback_data=f'answer:decline:{partner_data["id"]}')
        ready = types.InlineKeyboardButton('‚ù§Ô∏è', callback_data=f'answer:ready:{partner_data["id"]}')
        more_info = types.InlineKeyboardButton('–ú–Ω–µ–Ω–∏–µ –í–∞–∑–æ', callback_data=f'find:more_info:{partner_data["id"]}:present')

        kb = types.InlineKeyboardMarkup().row(prev, next).row(decline, ready).row(more_info)

        if len(partner_data['photo'].split()) >= 2:
            photo = partner_data['photo'].split()[page - 1]

        else:
            photo = partner_data['photo'].split()[0]

        if page == 2:
            text = f'–ò–Ω—Ç–µ—Ä–µ—Å—ã: \n\n{interests}'

            prev.callback_data = f'find:prev:{partner_data["id"]}:present'
            next.callback_data = f'None'            
        
        return photo, text, kb
    

    def get_match_text(self, user_id, partner_id, page=1):
        """
        Get match text for two users based on their IDs.
        :param user_id: int, the ID of the user
        :param partner_id: int, the ID of the partner user
        :return: tuple, containing the partner's photo and match text
        """
        pretendients = [partner_id]
        numbers = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£', 5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£', 8: '8Ô∏è‚É£', 9: '9Ô∏è‚É£', 10: 'üîü'}

        partner_data = db.get_data(table='users', filters={'id': pretendients[0]})[0]

        precent = utils.Comaparator(pretendients[0], user_id).compare()

        city = partner_data['city']
        age = partner_data['age']
        height = partner_data['height']
        alcohol = partner_data['alcohol']
        smoking = partner_data['smoking']
        body = partner_data['body']
        childrens = partner_data['childrens']
        username = partner_data['username']

        priority = []

        for item in partner_data['test_5'].split(';'):
            number = partner_data['test_5'].split(';').index(item) + 1
            number = numbers[number]

            priority.append(f'{number} {item}')

        priority = '\n'.join(priority)

        interests = ', '.join(partner_data['interests'].split(';'))

        text = (f'*–í—ã –∏ @{username} –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥-–¥—Ä—É–≥—É!* \n'
                f'----------------------------- \n'
                f'*ü´Ç –í–∞—à–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {precent}%* \n'
                f'----------------------------- \n'
                f'–ì–æ—Ä–æ–¥: {city} \n'
                f'–í–æ–∑—Ä–∞—Å—Ç: {age} \n'
                f'–†–æ—Å—Ç: {height} \n'
                f'–î–µ—Ç–∏: {childrens} \n\n'
                f'üç∑–ê–ª–æ–≥–æ–ª—å: {alcohol} \n'
                f'üö¨–ö—É—Ä–µ–Ω–∏–µ: {smoking} \n'
                f'üï¥üèª–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {body} \n')
        
        prev = types.InlineKeyboardButton('<', callback_data=f'None')
        next = types.InlineKeyboardButton('>', callback_data=f'find:next:{partner_data["id"]}:match')

        more_info = types.InlineKeyboardButton('–ú–Ω–µ–Ω–∏–µ –í–∞–∑–æ', callback_data=f'find:more_info:{partner_data["id"]}:match') 

        kb = types.InlineKeyboardMarkup().row(prev, next).row(more_info)       

        if len(partner_data['photo'].split()) >= 2:
            photo = partner_data['photo'].split()[page - 1]

        else:
            photo = partner_data['photo'].split()[0]

        if page == 2:
            text = f'–ò–Ω—Ç–µ—Ä–µ—Å—ã: \n\n{interests}'

            prev.callback_data = f'find:prev:{partner_data["id"]}:match'
            next.callback_data = f'None'            
        
        return photo, text, kb        
    
    def get_more_info(self, user_id, partner_id):
        user_1_data = db.get_data(table='users', filters={'id': user_id})[0]
        user_2_data = db.get_data(table='users', filters={'id': partner_id})[0]
        precent = utils.Comaparator(partner_id, user_id).compare()

        gender = user_1_data['gender']
        main_user_data = user_1_data
        second_user_data = user_2_data

        if user_2_data['gender'] == '–ú—É–∂—Å–∫–æ–π':
            user_1_data, user_2_data = user_2_data, user_1_data

        plus = []
        minus = []

        if user_1_data['test_1'][0] == '2' and user_2_data['test_1'][0] == '1':
            if user_1_data['test_1'][3] == '1' and user_2_data['test_1'][3] == '1':
                if user_1_data['test_4'][0] == '1' and user_2_data['test_4'][0] == '1':
                    plus.append('   üíò –í—ã –æ–±–∞ —Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–±–æ–¥—É –∏ –ø—Ä–æ–ø–æ–≤–µ–¥—É–µ—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–∞ –¥–æ–≤–µ—Ä–∏–∏.')

        if user_1_data['test_2'][1] == '1' and user_2_data['test_2'][1] == '1':
            if user_1_data['test_4'][5] == '2' and user_2_data['test_4'][5] == '2':
                plus.append('   üíò –ù–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ –ø—Ä–æ –≤–∞—Å, –≤—ã –æ–±–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –ø—Ä—è–º–æ, –∏–∑–±–µ–≥–∞—è –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–π.')

        if user_1_data['test_2'][1] == '2' and user_2_data['test_2'][1] == '2':
            if user_1_data['test_4'][6] == '1' and user_2_data['test_4'][6] == '1':
                plus.append('   üíò –í–∞–º –±—É–¥–µ—Ç –ª–µ–≥–∫–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è –¥—Ä—É–≥ –ø–æ–¥ –¥—Ä—É–≥–∞, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–π–º–∞—Ç—å –æ–¥–Ω—É –≤–æ–ª–Ω—É –¥–ª—è –æ–±—â–∏—Ö –º—ã—Å–ª–µ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.')

        if user_1_data['test_1'][2] == '1' and user_2_data['test_1'][2] == '1':
            if '3' in user_1_data['test_3'] and '3' in user_2_data['test_3']:
                plus.append('   üíò –î–ª—è —Ç–∞–∫–æ–≥–æ —Å–∞–ø–∏–æ—Å–µ–∫—Å—É–∞–ª–∞ —Ç—Ä—É–¥–Ω–æ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –Ω–æ —è —ç—Ç–æ —Å–¥–µ–ª–∞–ª. –í–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ–ø—Ä–∏–∫—Ä—ã—Ç—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º, –∞ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –≤–Ω–µ—Å—Ç–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –≤–∞—à—É –∂–∏–∑–Ω—å.')

        if user_2_data['test_2'][7] == '1' and user_1_data['test_2'][7] == '1':
            if user_2_data['test_4'][1] == '1' and user_1_data['test_4'][1] == '1':
                if user_2_data['test_4'][2] == '2':
                    plus.append('   üíò –£ —Ç–µ–±—è –µ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏, —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - –≤ –µ–≥–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–∏ –∏ –∑–∞–±–æ—Ç–µ. –ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–≤–µ—á–∞—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é')

        if user_2_data['test_1'][0] == '2' and user_1_data['test_1'][0] == '1':
            if user_2_data['test_4'][2] == '1' and user_1_data['test_2'][2] == '2':
                if user_2_data['test_2'][6] == '2':
                    plus.append('   üíò –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –±—É–¥—É—Ç –¥–ª—è —Ç–µ–±—è –æ–ø–æ—Ä–æ–π. –° —Ç–∞–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è ¬´–∫–∞–∫ –∑–∞ –∫–∞–º–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω–æ–π¬ª.')

        if user_2_data['test_1'][0] == '2' and user_1_data['test_1'][0] == '1':
            if user_2_data['test_4'][5] == '1' and user_2_data['test_4'][5] == '1':
                if user_2_data['test_5'].split(';')[0] == '–ú—É–∂':
                    plus.append('   üíò –í–∞—à–∏ –≤–∑–≥–ª—è–¥—ã –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏, –≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ—Å—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —É–∫–ª–∞–¥–æ–≤ —Å–µ–º—å–∏.')

        if user_1_data['test_2'][3] == '2' and user_2_data['test_2'][3] == '2':
            if user_1_data['test_2'][6] == '2' and user_2_data['test_2'][6] == '2':
                plus.append('   üíò –í—ã –æ–±–∞ —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º–∏')

        if user_1_data['test_4'][1] == '2' and user_2_data['test_4'][1] == '2':
            plus.append('   üíò –ö–æ–Ω—Ñ–µ—Ç–Ω–æ-–±—É–∫–µ—Ç–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É –∏ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–æ–º–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.')

        if '–†–µ–ª–∏–≥–∏—è' in user_1_data['test_5'].split(';')[:3] and '–†–µ–ª–∏–≥–∏—è' in user_2_data['test_5'].split(';')[:3]:
            plus.append('   üíò –ü–∞—Ä—Ç–Ω–µ—Ä —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ç–≤–æ–∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –≤–∑–≥–ª—è–¥—ã')

        if user_2_data['test_4'][1] == '1':
            if user_1_data['test_4'][1] == '1' or user_1_data['test_2'][7] == '1':
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    plus.append('   üíò –¢–≤–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ—è–≤–ª—è—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–∞ –¥–ª—è –Ω–µ–≥–æ.')
                else:
                    plus.append('   üíò –¢—ã —Ü–µ–Ω–∏—à—å –≤–Ω–∏–º–∞–Ω–∏–µ, –∞ –ø–∞—Ä—Ç–Ω–µ—Ä —Å–ø–æ—Å–æ–±–µ–Ω –µ–≥–æ –∑–∞–≤–æ–µ–≤–∞—Ç—å. –ù–µ –∑–∞–±—ã–≤–∞–π –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –µ–≥–æ –∑–∞ —ç—Ç–æ.')

        if user_2_data['test_4'][2] == '1':
            if (user_1_data['test_1'][0] == '1') and (user_1_data['test_2'][2] == '2' or user_1_data['test_2'][6] == '2' or user_1_data['test_2'][3] == '2'):
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    plus.append('   üíò –ü–∞—Ä—Ç–Ω–µ—Ä –±—É–¥–µ—Ç —Ü–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, –ø–æ—ç—Ç–æ–º—É —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –æ–ø—Ä–∞–≤–¥–∞—Ç—å –µ–µ –æ–∂–∏–¥–∞–Ω–∏—è üòâ')
                else:
                    plus.append('   üíò –ó–Ω–∞—é, –∫–∞–∫ —Ç—ã —Ü–µ–Ω–∏—à—å –ª–∏–¥–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É –º–æ–∏ —Å—Ç—Ä–µ–ª—ã –ø–æ–ø–∞–ª–∏ –≤ –Ω—É–∂–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ.')

        if user_2_data['test_4'][2] == '3':
            if (user_1_data['test_5'].split(';')[0] == '–ñ–µ–Ω–∞') and (user_1_data['test_2'][1] == '2' or user_1_data['test_2'][2] == '2'):
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    plus.append('   üíò –ü–∞—Ä—Ç–Ω–µ—Ä –±—É–¥–µ—Ç —Ü–µ–Ω–∏—Ç—å —Ç–≤–æ—é –∑–∞–±–æ—Ç–ª–∏–≤–æ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –æ–ø—Ä–∞–≤–¥–∞—Ç—å –µ–µ –æ–∂–∏–¥–∞–Ω–∏—è üòâ')
                else:
                    plus.append('   üíò –ó–Ω–∞—é, –∫–∞–∫ —Ç—ã —Ü–µ–Ω–∏—à—å –∑–∞–±–æ—Ç—É, –ø–æ—ç—Ç–æ–º—É –º–æ–∏ —Å—Ç—Ä–µ–ª—ã –ø–æ–ø–∞–ª–∏ –≤ –Ω—É–∂–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ.')

        if user_2_data['test_4'][2] == '2':
            if user_1_data['test_2'][7] == '1':
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    plus.append('   üíò –ü–∞—Ä—Ç–Ω–µ—Ä –±—É–¥–µ—Ç —Ü–µ–Ω–∏—Ç—å —Ç–≤–æ—é —â–µ–¥—Ä–æ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É —Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –æ–ø—Ä–∞–≤–¥–∞—Ç—å –µ–µ –æ–∂–∏–¥–∞–Ω–∏—è üòâ')
                else:
                    plus.append('   üíò –ó–Ω–∞—é, –∫–∞–∫ —Ç—ã —Ü–µ–Ω–∏—à—å —â–µ–¥—Ä–æ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –º–æ–∏ —Å—Ç—Ä–µ–ª—ã –ø–æ–ø–∞–ª–∏ –≤ –Ω—É–∂–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ.')

        # ---- 

        if user_2_data['test_1'][0] == '1' and user_1_data['test_1'][0] == '1':
            if user_2_data['test_4'][5] == '3' and user_2_data['test_4'][5] == '1':
                minus.append('  ‚ö†Ô∏è –£ –≤–∞—Å —Ä–∞–∑–Ω—ã–µ –≤–∑–≥–ª—è–¥—ã –Ω–∞ –ø—Ä–∞–≤–æ –≥–ª–∞–≤–µ–Ω—Å—Ç–≤–∞ –≤ —Å–µ–º—å–µ. –ö–∞–∂–¥—ã–π –±—É–¥–µ—Ç –Ω–∞–≤—è–∑—ã–≤–∞—Ç—å —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è, —á—Ç–æ –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.')

            if user_2_data['test_1'][3] == '1' and user_1_data['test_2'][4] == '1':
                if user_2_data['test_4'][0] == '1' and user_1_data['test_4'][0] == '1':
                    minus.append('  ‚ö†Ô∏è –ß—Ä–µ–∑–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–ª—è—Ç—å —Ç–µ–±—è, –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±–æ—é–¥–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—á–Ω–æ–π —Å–≤–æ–±–æ–¥—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –±—É–¥—É—â–µ–º.')

        if user_1_data['test_2'][1] == '1' and user_2_data['test_2'][1] == '2':
            if user_1_data['test_4'][6] == '2' and user_2_data['test_4'][6] == '1':
                minus.append('  ‚ö†Ô∏è –ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è —Ç–µ–±–µ –Ω–µ—É–º–µ—Å—Ç–Ω–æ–π, –∞ —á—É–≤—Å—Ç–≤–æ –±–µ–∑—Ä–∞–∑–ª–∏—á–∏—è - –Ω–µ–ø—Ä–µ—Å—Ç–∞–Ω–Ω—ã–º. –ò–∑—É—á–∞–π—Ç–µ –∏ —É—á–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤–æ —ç–º–ø–∞—Ç–∏–∏ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –Ω–∏–≤–µ–ª–∏—Ä—É—é—Ç –≤–∞—à–∏ —Ä–∞–∑–ª–∏—á–∏—è.')

        if user_1_data['test_1'][2] == '1' and user_2_data['test_1'][2] == '2':
            if ('3' in user_1_data['test_3'] and '3' not in user_2_data['test_3']) or ('3' in user_2_data['test_3'] and '3' not in user_1_data['test_3']):
                minus.append('  ‚ö†Ô∏è –ò–∑-–∑–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤–∞—à –¥–∏–∞–ª–æ–≥ —Ä–∏—Å–∫—É–µ—Ç –±—ã—Å—Ç—Ä–æ –∏—Å—á–µ—Ä–ø–∞—Ç—å —Å–µ–±—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —á—Ç–æ —Ç–æ –æ–±—â–µ–µ, –∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.')

        if user_2_data['test_2'][7] == '1' and user_1_data['test_2'][7] == '2':
            if user_2_data['test_4'][1] == '1' and user_1_data['test_4'][1] == '2':
                if user_2_data['test_4'][2] == '2':
                    minus.append('  ‚ö†Ô∏è –¢–µ–±–µ –≤–∞–∂–Ω–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –Ω—É–∂–Ω–æ–π, –Ω–æ –Ω–µ –∑–Ω–∞—é, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –≤–Ω–∏–º–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å —Ç–µ–±—è –∫ —Å–µ–±–µ.. –≠—Ç–æ —Ç–µ–±–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã—è—Å–Ω–∏—Ç—å.')

        if user_1_data['test_2'][3] == '2' and user_2_data['test_2'][3] == '1':
            if user_1_data['test_2'][6] == '2' and user_2_data['test_2'][6] == '1':
                minus.append('  ‚ö†Ô∏è –ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è —Ç–µ–±–µ –æ–±—Ä–µ–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–π')

        if '–†–µ–ª–∏–≥–∏—è' in user_1_data['test_5'].split(';')[:4] or '–†–µ–ª–∏–≥–∏—è' in user_2_data['test_5'].split(';')[:4]:
            if '–†–µ–ª–∏–≥–∏—è' in user_1_data['test_5'].split(';')[-1] and '–†–µ–ª–∏–≥–∏—è' in user_2_data['test_5'].split(';')[-1]:
                if '–ù–∞—É–∫–∞' in user_1_data['interests'] or '–ù–∞—É–∫–∞' in user_2_data['interests']:
                    minus.append('  ‚ö†Ô∏è –ü–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–∑–¥–µ–ª—è—Ç—å —Ç–≤–æ–∏—Ö —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.')

        if user_1_data['test_1'][0] + user_2_data['test_1'][0] in ['12', '21']:
            if (user_1_data['test_1'][3] == '1' and user_2_data['test_2'][4] == '1') or (user_2_data['test_1'][3] == '1' and user_1_data['test_2'][4] == '1'):
                if user_1_data['test_4'][0] + user_2_data['test_4'][0] in ['12', '21']:
                    if gender == '–ú—É–∂—Å–∫–æ–π':
                        minus.append('  ‚ö†Ô∏è –ß—Ä–µ–∑–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–ª—è—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±–æ—é–¥–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º.')

                    else:
                        minus.append('  ‚ö†Ô∏è –ß—Ä–µ–∑–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–ª—è—Ç—å —Ç–µ–±—è, –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ–±–æ—é–¥–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—á–Ω–æ–π —Å–≤–æ–±–æ–¥—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –±—É–¥—É—â–µ–º.')

        if main_user_data['test_2'][1] == '1' and main_user_data['test_4'][6] == '2':
            if second_user_data['test_2'][1] == '2' and second_user_data['test_4'][6] == '1':
                minus.append('  ‚ö†Ô∏è –ü–æ—Ä–æ–π –Ω–∞–º–µ–∫–∏ –∏ –Ω–µ–¥–æ—Å–∫–∞–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–≥—É—Ç –∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–ø–æ—Å—Ç–∏–∂–∏–º–æ–π –∑–∞–≥–∞–¥–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –¥–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã.')

        if main_user_data['test_2'][1] == '2' and main_user_data['test_4'][6] == '1':
            if second_user_data['test_2'][1] == '1' and second_user_data['test_4'][6] == '2':
                minus.append('  ‚ö†Ô∏è –ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –¥–ª—è —Ç–µ–±—è –Ω–µ—É–º–µ—Å—Ç–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –¥–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã.')

        if user_2_data['test_4'][1] == '1':
            if user_1_data['test_2'][7] == '2' and user_2_data['test_4'][1] == '2':
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    minus.append('  ‚ö†Ô∏è –ü–∞—Ä—Ç–Ω–µ—Ä—É –º–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å —Ç–≤–æ–∏—Ö —É—Ö–∞–∂–∏–≤–∞–Ω–∏–π.')
                else:
                    minus.append('  ‚ö†Ô∏è –¢–µ–±–µ –≤–∞–∂–Ω–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –Ω—É–∂–Ω–æ–π, –Ω–æ –Ω–µ –∑–Ω–∞—é, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –≤–Ω–∏–º–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å —Ç–µ–±—è –∫ —Å–µ–±–µ.. –≠—Ç–æ —Ç–µ–±–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã—è—Å–Ω–∏—Ç—å.')

        if user_2_data['test_4'][2] == '1':
            if (user_1_data['test_1'][0] == '2') and (user_1_data['test_2'][2] == '1' or user_2_data['test_2'][6] == '1' or user_2_data['test_2'][3] == '1'):
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    minus.append('  ‚ö†Ô∏è –ü–∞—Ä—Ç–Ω–µ—Ä –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –æ—Ç —Ç–µ–±—è —Ä–µ—à–µ–Ω–∏–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã.')
                else:
                    minus.append('  ‚ö†Ô∏è –ó–Ω–∞—é, –∫–∞–∫ —Ç—ã —Ü–µ–Ω–∏—à—å –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –Ω–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ —Å–∫–ª–æ–Ω–µ–Ω –∫ –µ–≥–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—é.')

        if user_2_data['test_4'][3] == '3':
            answers_temp = [
                user_1_data['test_2'][1] == '1',
                user_1_data['test_2'][2] == '1',
                user_1_data['test_2'][6] == '1'
            ]
            if answers_temp.count(True) >= 2:
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    minus.append('  ‚ö†Ô∏è –ï—Å–ª–∏ —Ç—ã –∑–∞–±—ã–≤–∞–µ—à—å –ø—Ä–æ—è–≤–ª—è—Ç—å –∑–∞–±–æ—Ç—É, —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ—é —á—É—Ç–∫–æ—Å—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.')
                else:
                    minus.append('  ‚ö†Ô∏è –ó–Ω–∞—é, –∫–∞–∫ —Ç—ã —Ü–µ–Ω–∏—à—å –∑–∞–±–æ—Ç—É, –Ω–æ –µ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ —Å–∫–ª–æ–Ω–µ–Ω –∫ –µ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—é.')

        if user_1_data['test_1'][0] + user_2_data['test_1'][0] in ['21', '12']:
            if '–ö–∞—Ä—å–µ—Ä–∞' in user_1_data['test_5'].split(';')[:3] or '–ö–∞—Ä—å–µ—Ä–∞' in user_2_data['test_5'].split(';')[:3]:
                if user_1_data['test_4'][5] == '1' or user_2_data['test_4'][5] == '1':
                    if gender == '–ú—É–∂—Å–∫–æ–π':
                        minus.append('  ‚ö†Ô∏è –£ –≤–∞—Å —Ä–∞–∑–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –º–æ–≥—É—Ç –Ω–µ –æ–ø—Ä–∞–≤–¥–∞—Ç—å –≤–∞—à–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π.')
                    else:
                        minus.append('  ‚ö†Ô∏è –£ –≤–∞—Å —Ä–∞–∑–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –≤—ã—è—Å–Ω–∏—Ç–µ, –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –≤–∞—à–µ–π —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∞–º.')

        if user_2_data['test_4'][2] == '2':
            if user_1_data['test_2'][7] == '2':
                if gender == '–ú—É–∂—Å–∫–æ–π':
                    minus.append('  ‚ö†Ô∏è –†–∞—Å—Å—á–µ—Ç —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ–± —ç–º–æ—Ü–∏—è—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–∞.')
                else:
                    minus.append('  ‚ö†Ô∏è –ó–Ω–∞—é, –∫–∞–∫ —Ç—ã —Ü–µ–Ω–∏—à—å —â–µ–¥—Ä–æ—Å—Ç—å, –Ω–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ —Å–∫–ª–æ–Ω–µ–Ω –∫ –µ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—é.')


        plus_list_text = '\n'.join(plus)
        minus_list_text = '\n'.join(minus)

        plus_text = '' if not plus else f'–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n{plus_list_text}'
        minus_text = '' if not minus else f'–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:\n{minus_list_text}'
        comment = ''

        if len(minus) == 0 and len(plus) >= 2:
            comment = '–£ –≤–∞—à–µ–π –ø–∞—Ä—ã –±–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª'
        
        elif len(minus) == 0 and len(plus) == 1:
            comment = '–ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ç–∏–≤, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∞–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞'

        elif len(plus) == 0 and len(minus) == 0 and precent >= 70:
            comment = '–ù–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ç–∏–≤, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∞–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞'

        elif (50 <= precent <= 69) or (50 <= precent <= 75 and len(minus) > len(plus)):
            comment = '–£ –≤–∞—à–µ–π –ø–∞—Ä—ã –Ω–µ —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –Ω–æ –µ—Å–ª–∏ —Å—Ç–µ—Ä–ø–∏—Ç—Å—è, —Ç–æ –º–æ–∂–µ—Ç –∏ —Å–ª—é–±–∏—Ç—Å—è'

        elif precent < 50:
            comment = '–ó–¥–µ—Å—å –¥–∞–∂–µ –º–æ–∏ —Å—Ç—Ä–µ–ª—ã –±–µ—Å—Å–∏–ª—å–Ω—ãüíò, –Ω–µ—Å–∏—Ç–µ —Å—Ä–∞–∑—É –ø–∏—Å—Ç–æ–ª–µ—Çüî´'
            
        
        text = f'{comment}\n\n{plus_text}\n\n{minus_text}'

        photo = types.InputFile('media/info.png')

        if text:
            return photo, text
        
        return photo, '–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª—é—Å—ã –∏–ª–∏ –º–∏–Ω—É—Å—ã'